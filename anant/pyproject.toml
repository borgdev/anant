[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "anant"
dynamic = ["version"]
description = "A cutting-edge hypergraph analytics platform with Polars backend for superior performance"
readme = "README.md"
requires-python = ">=3.9"
license = {file = "LICENSE"}
keywords = ["hypergraph", "network", "analysis", "polars", "analytics", "data-science"]
authors = [
    {name = "borgdev", email = "amiya.mansingh@gmail.com"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "polars>=0.20.0",
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    "networkx>=3.0",
    "scikit-learn>=1.0.0",
    "pyarrow>=12.0.0",  # For parquet support
    "typing-extensions>=4.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-benchmark>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "numpydoc>=1.5.0",
    "sphinx-gallery>=0.12.0",
]
benchmark = [
    "pandas>=2.0.0",  # For comparison benchmarks
    "hypernetx>=2.4.0",  # For comparison benchmarks
    "memory-profiler>=0.60.0",
    "psutil>=5.9.0",
]
viz = [
    "matplotlib>=3.5.0",
    "plotly>=5.0.0",
    "bokeh>=3.0.0",
]
gpu = [
    "torch>=2.0.0",  # PyTorch for GPU operations
    "cupy-cuda12x>=12.0.0",  # CuPy for CUDA operations
    "nvidia-ml-py>=12.0.0",  # GPU monitoring
    "pynvml>=11.0.0",  # NVIDIA GPU monitoring
]
all = ["anant[dev,docs,benchmark,viz,gpu]"]

[project.urls]
Documentation = "https://borgdev.github.io/anant"
Repository = "https://github.com/borgdev/anant"
"Bug Tracker" = "https://github.com/borgdev/anant/issues"
Changelog = "https://github.com/borgdev/anant/blob/main/CHANGELOG.md"

[tool.hatch.version]
path = "anant/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["anant"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=anant",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "benchmark: marks tests as benchmarks",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["anant"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]