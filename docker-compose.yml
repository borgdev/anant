# Anant Enterprise Platform - Unified Docker Compose
# Supports multiple deployment profiles: production, development, registry, monitoring
#
# Usage Examples:
#   Production:     docker-compose --profile production up -d
#   Development:    docker-compose --profile development up -d  
#   Registry Only:  docker-compose --profile registry up -d
#   Full Stack:     docker-compose --profile production --profile monitoring up -d
#
# Available Profiles:
#   - production: Full enterprise Ray cluster with all services
#   - development: Lightweight setup for local development
#   - registry: Graph registry with PostgreSQL + Parquet storage  
#   - monitoring: Prometheus + Grafana monitoring stack
#   - jupyter: Interactive development environment

services:
  # =============================================================================
  # PRODUCTION PROFILE - Full Enterprise Ray Cluster
  # =============================================================================
  
  # Ray Head Node - Coordinates the cluster and runs Anant Graph API
  anant-ray-head:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: anant/enterprise-ray:latest
    container_name: anant-ray-head
    hostname: ray-head
    profiles: ["production"]
    command:
      - /bin/bash
      - -c
      - >
        ray start --head 
        --dashboard-host=0.0.0.0 
        --dashboard-port=8265 
        --redis-password=anant_cluster_2024 
        --port=6379
        --dashboard-port=8265
        && echo "Ray cluster head started successfully" 
        && sleep 5
        && cd /app/anant_api 
        && export PYTHONPATH=/app:$PYTHONPATH
        && python run.py &
        && echo "Anant Graph API started on port 8088"
        && tail -f /dev/null
    shm_size: '2gb'
    ports:
      - "8888:8088"    # Anant Graph API (external:internal)
      - "8285:8265"    # Ray Dashboard
      - "6380:6379"    # Ray cluster port
    environment:
      - RAY_DISABLE_IMPORT_WARNING=1
      - RAY_HEAD_NODE=true
      - ANANT_MODE=production
      - ANANT_CLUSTER_NAME=enterprise-production
      - ANANT_SECURITY_ENABLED=true
      - ANANT_MONITORING_ENABLED=true
      - ENVIRONMENT=production
      - RAY_ADDRESS=ray://ray-head:6379
      - POSTGRES_HOST=postgres
      - REDIS_URL=redis://:anant_cluster_2024@cache:6379/0
      - PYTHONPATH=/app:/app/anant_api
    volumes:
      - anant-data:/app/data
      - anant-logs:/app/logs
      - ./config:/app/config:ro
      - ./anant_api:/app/anant_api
      - ./anant:/app/anant:ro
    networks:
      - anant-network
    depends_on:
      anant-postgres:
        condition: service_healthy
      anant-cache:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    restart: unless-stopped

  # Ray Worker Node 1 - Geometric Processing
  anant-ray-worker-geo-1:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: anant/enterprise-ray:latest
    container_name: anant-ray-worker-geo-1
    hostname: ray-worker-geo-1
    profiles: ["production"]
    command:
      - /bin/bash
      - -c
      - >
        ray start 
        --address=ray-head:6379 
        --redis-password=anant_cluster_2024 
        && echo "Geometric worker joined Ray cluster" 
        && tail -f /dev/null
    shm_size: '1gb'
    environment:
      - RAY_DISABLE_IMPORT_WARNING=1
      - RAY_HEAD_NODE=false
      - ANANT_WORKER_TYPE=geometric
      - ANANT_CLUSTER_NAME=enterprise-production
    volumes:
      - anant-data:/app/data:ro
      - anant-logs:/app/logs
    networks:
      - anant-network
    depends_on:
      - anant-ray-head
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    restart: unless-stopped

  # Ray Worker Node 2 - Contextual Processing
  anant-ray-worker-ctx-1:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: anant/enterprise-ray:latest
    container_name: anant-ray-worker-ctx-1
    hostname: ray-worker-ctx-1
    profiles: ["production"]
    command:
      - /bin/bash
      - -c
      - >
        ray start 
        --address=ray-head:6379 
        --redis-password=anant_cluster_2024 
        && echo "Contextual worker joined Ray cluster" 
        && tail -f /dev/null
    shm_size: '1gb'
    environment:
      - RAY_DISABLE_IMPORT_WARNING=1
      - RAY_HEAD_NODE=false
      - ANANT_WORKER_TYPE=contextual
      - ANANT_CLUSTER_NAME=enterprise-production
    volumes:
      - anant-data:/app/data:ro
      - anant-logs:/app/logs
    networks:
      - anant-network
    depends_on:
      - anant-ray-head
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    restart: unless-stopped

  # Ray Worker Node 3 - Multi-purpose
  anant-ray-worker-multi-1:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: anant/enterprise-ray:latest
    container_name: anant-ray-worker-multi-1
    hostname: ray-worker-multi-1
    profiles: ["production"]
    command:
      - /bin/bash
      - -c
      - >
        ray start 
        --address=ray-head:6379 
        --redis-password=anant_cluster_2024 
        && echo "Multi-purpose worker joined Ray cluster" 
        && tail -f /dev/null
    shm_size: '1gb'
    environment:
      - RAY_DISABLE_IMPORT_WARNING=1
      - RAY_HEAD_NODE=false
      - ANANT_WORKER_TYPE=multi
      - ANANT_CLUSTER_NAME=enterprise-production
    volumes:
      - anant-data:/app/data:ro
      - anant-logs:/app/logs
    networks:
      - anant-network
    depends_on:
      - anant-ray-head
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
    restart: unless-stopped

  # =============================================================================
  # DEVELOPMENT PROFILE - Lightweight Development Environment
  # =============================================================================

  # Ray Head Node - Development with hot reload
  anant-ray-head-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    image: anant/enterprise-ray:dev
    container_name: anant-ray-head-dev
    hostname: ray-head-dev
    profiles: ["development"]
    command:
      - /bin/bash
      - -c
      - |
        ray start --head --dashboard-host=0.0.0.0 --dashboard-port=8265 --port=6379
        echo "Ray started successfully - dashboard at ray-head-dev:8265"
        sleep 5
        cd /app/anant_api
        python run.py &
        echo "Anant Graph API started with hot reload on port 8088"
        wait
    ports:
      - "8889:8088"    # Anant Graph API Dev (external:internal)
      - "8286:8265"    # Ray Dashboard (different port for dev)
      - "6381:6379"    # Ray cluster communication
    environment:
      - RAY_DISABLE_IMPORT_WARNING=1
      - RAY_HEAD_NODE=true
      - ANANT_MODE=development
      - ANANT_DEBUG=true
      - ANANT_LOG_LEVEL=DEBUG
      - ENVIRONMENT=development
      - RELOAD=true
      - DEBUG=true
      - POSTGRES_HOST=postgres-dev
      - POSTGRES_PORT=5432
      - POSTGRES_USER=anant_dev
      - POSTGRES_PASSWORD=dev_password
      - POSTGRES_DB=anant_dev
      - PYTHONPATH=/app:/app/anant_api
    volumes:
      - .:/app  # Mount source code for live reload
      - anant-dev-data:/app/data
      - anant-dev-logs:/app/logs
    networks:
      - anant-network
    depends_on:
      anant-postgres-dev:
        condition: service_healthy
    restart: "no"  # Don't restart in development

  # Single Ray Worker - Development
  anant-ray-worker-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    image: anant/enterprise-ray:dev
    container_name: anant-ray-worker-dev
    hostname: ray-worker-dev
    profiles: ["development"]
    command:
      - /bin/bash
      - -c
      - >
        sleep 10 &&
        ray start 
        --address=ray-head-dev:6379 
        && echo "Development worker joined Ray cluster"
        && tail -f /dev/null
    environment:
      - RAY_DISABLE_IMPORT_WARNING=1
      - RAY_HEAD_NODE=false
      - ANANT_MODE=development
      - ANANT_DEBUG=true
    volumes:
      - .:/app  # Mount source code
      - anant-dev-data:/app/data:ro
      - anant-dev-logs:/app/logs
    networks:
      - anant-network
    depends_on:
      - anant-ray-head-dev
    restart: "no"

  # =============================================================================
  # REGISTRY PROFILE - Graph Registry with Parquet Storage
  # =============================================================================

  # Registry API Server - FastAPI server for registry operations
  anant-registry-api:
    build:
      context: .
      dockerfile: Dockerfile.registry
    container_name: anant-registry-api
    hostname: registry-api
    profiles: ["registry", "production"]
    ports:
      - "9096:8080"
    volumes:
      - ./anant:/app/anant:ro
      - anant-parquet-storage:/app/parquet_data
      - ./config:/app/config:ro
    depends_on:
      anant-postgres:
        condition: service_healthy
      anant-cache:
        condition: service_healthy
    networks:
      - anant-network
    environment:
      - POSTGRES_URL=postgresql://postgres:anant_secure_2024@postgres:5432/anant_registry
      - REDIS_URL=redis://:anant_cluster_2024@cache:6379/0
      - RAY_ADDRESS=ray://ray-head:6379
      - PARQUET_BASE_PATH=/app/parquet_data
      - PYTHONPATH=/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # =============================================================================
  # SHARED SERVICES - Used across multiple profiles
  # =============================================================================

  # Redis - Caching and session management
  anant-cache:
    image: redis:7-alpine
    container_name: anant-cache
    hostname: cache
    profiles: ["production", "development", "registry"]
    command: redis-server --requirepass anant_cluster_2024 --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6380:6379"
    volumes:
      - anant-redis-data:/data
    networks:
      - anant-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # PostgreSQL - Unified database for enterprise features and registry
  anant-postgres:
    image: postgres:15-alpine
    container_name: anant-postgres
    hostname: postgres
    profiles: ["production", "registry"]
    environment:
      - POSTGRES_DB=anant_enterprise
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=anant_secure_2024
      - POSTGRES_INITDB_ARGS=--auth-host=md5
    ports:
      - "5454:5432"  # Single port for both enterprise and registry
    volumes:
      - anant-postgres-data:/var/lib/postgresql/data
      - ./config/init-unified-db.sql:/docker-entrypoint-initdb.d/init-unified-db.sql:ro
    networks:
      - anant-network
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d anant_enterprise"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Development Database
  anant-postgres-dev:
    image: postgres:15-alpine
    container_name: anant-postgres-dev
    hostname: postgres-dev
    profiles: ["development"]
    environment:
      - POSTGRES_DB=anant_dev
      - POSTGRES_USER=anant_dev
      - POSTGRES_PASSWORD=dev_password
    ports:
      - "5457:5432"  # Different port for dev (avoiding conflict with 5456)
    volumes:
      - anant-dev-postgres-data:/var/lib/postgresql/data
    networks:
      - anant-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U anant_dev -d anant_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: "no"

  # =============================================================================
  # JUPYTER PROFILE - Interactive Development Environment
  # =============================================================================

  # Jupyter Lab - Development and analysis interface
  anant-jupyter:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: anant-jupyter
    hostname: jupyter
    profiles: ["jupyter", "development"]
    ports:
      - "8890:8888"
    volumes:
      - ./notebooks:/home/jovyan/notebooks
      - ./anant:/home/jovyan/anant:ro
      - anant-parquet-storage:/home/jovyan/parquet_data
      - ./tutorials:/home/jovyan/tutorials:ro
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=anant_dev_token
      - GRANT_SUDO=yes
    networks:
      - anant-network
    command: >
      bash -c "
      pip install polars pyarrow ray[default] redis psycopg2-binary &&
      start-notebook.sh --NotebookApp.token='anant_dev_token' --NotebookApp.password=''
      "
    user: root
    restart: "no"

  # =============================================================================
  # MONITORING PROFILE - Prometheus + Grafana
  # =============================================================================

  # Prometheus - Metrics collection
  anant-prometheus:
    image: prom/prometheus:latest
    container_name: anant-prometheus
    hostname: prometheus
    profiles: ["monitoring", "production"]
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - anant-prometheus-data:/prometheus
    networks:
      - anant-network
    restart: unless-stopped

  # Grafana - Metrics visualization
  anant-grafana:
    image: grafana/grafana:latest
    container_name: anant-grafana
    hostname: grafana
    profiles: ["monitoring", "production"]
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=anant_admin_2024
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3001:3000"
    volumes:
      - anant-grafana-data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    networks:
      - anant-network
    depends_on:
      - anant-prometheus
    restart: unless-stopped

  # Nginx - Reverse proxy and load balancer
  anant-nginx:
    image: nginx:alpine
    container_name: anant-nginx
    hostname: nginx
    profiles: ["production"]
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - anant-static:/var/www/html
    networks:
      - anant-network
    depends_on:
      - anant-ray-head
    restart: unless-stopped

# =============================================================================
# NETWORKS - Unified network for all services
# =============================================================================
networks:
  anant-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

# =============================================================================
# VOLUMES - Persistent storage for all profiles
# =============================================================================
volumes:
  # Production volumes
  anant-data:
    driver: local
  anant-logs:
    driver: local
  anant-postgres-data:
    driver: local
  anant-static:
    driver: local

  # Development volumes
  anant-dev-data:
    driver: local
  anant-dev-logs:
    driver: local
  anant-dev-postgres-data:
    driver: local

  # Registry volumes
  anant-parquet-storage:
    driver: local

  # Shared volumes
  anant-redis-data:
    driver: local

  # Monitoring volumes
  anant-prometheus-data:
    driver: local
  anant-grafana-data:
    driver: local